{"ast":null,"code":"export class ClaudeApiService {\n  constructor() {\n    this.apiKey = void 0;\n    this.baseUrl = 'https://api.anthropic.com/v1/messages';\n    this.apiKey = process.env.REACT_APP_CLAUDE_API_KEY || '';\n    if (!this.apiKey) {\n      console.warn('Claude API key not found. Set REACT_APP_CLAUDE_API_KEY environment variable.');\n    }\n  }\n  async analyzeTeam(team, allTeams, leagueName, currentWeek) {\n    if (!this.apiKey) {\n      throw new Error('Claude API key not configured');\n    }\n    const leagueContext = this.buildLeagueContext(allTeams, leagueName, currentWeek);\n    const teamContext = this.buildTeamContext(team, allTeams);\n    const upcomingOpponent = this.getUpcomingOpponent(team, allTeams, currentWeek);\n    const prompt = `Provide a comprehensive fantasy football analysis for this team:\n\nLEAGUE CONTEXT:\n${leagueContext}\n\nTEAM TO ANALYZE:\n${team.display_name}\nRecord: ${team.wins}-${team.losses}\nPoints For: ${team.points_for.toFixed(1)}\nLeague Rank: ${team.rank} out of ${allTeams.length}\n\nPERFORMANCE CONTEXT:\n${teamContext}\n\nUPCOMING MATCHUP:\nNext opponent: ${upcomingOpponent}\n\nProvide a detailed analysis in JSON format:\n{\n  \"overallGrade\": \"A+/A/A-/B+/B/B-/C+/C/C-/D+/D/F\",\n  \"gradeExplanation\": \"2-3 sentence explanation of the grade\",\n  \"strengths\": [\"strength1\", \"strength2\", \"strength3\"],\n  \"weaknesses\": [\"weakness1\", \"weakness2\", \"weakness3\"], \n  \"advice\": \"Specific actionable advice for upcoming games\",\n  \"outlook\": \"Rest of season and playoff outlook\",\n  \"upcomingMatchup\": {\n    \"opponent\": \"${upcomingOpponent}\",\n    \"prediction\": \"Win/Loss prediction with score estimate\",\n    \"keyFactors\": [\"factor1\", \"factor2\", \"factor3\"],\n    \"confidence\": \"High/Medium/Low confidence level\"\n  },\n  \"rosterAnalysis\": {\n    \"qb\": \"QB position strength assessment\",\n    \"rb\": \"RB position strength assessment\", \n    \"wr\": \"WR position strength assessment\",\n    \"te\": \"TE position strength assessment\",\n    \"flex\": \"FLEX position depth assessment\",\n    \"defense\": \"K/DST strength assessment\"\n  },\n  \"recentTrends\": [\"trend1\", \"trend2\", \"trend3\"]\n}\n\nFocus on fantasy football strategy, performance trends, and actionable insights.`;\n    try {\n      var _data$content$;\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': this.apiKey,\n          'anthropic-version': '2023-06-01'\n        },\n        body: JSON.stringify({\n          model: 'claude-3-sonnet-20240229',\n          max_tokens: 1000,\n          messages: [{\n            role: 'user',\n            content: prompt\n          }]\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Claude API error: ${response.status}`);\n      }\n      const data = await response.json();\n      const analysisText = ((_data$content$ = data.content[0]) === null || _data$content$ === void 0 ? void 0 : _data$content$.text) || '';\n\n      // Parse the JSON response from Claude\n      const jsonMatch = analysisText.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error('Invalid response format from Claude API');\n      }\n      const analysisData = JSON.parse(jsonMatch[0]);\n      return {\n        teamName: team.display_name,\n        record: `${team.wins}-${team.losses}`,\n        overallGrade: analysisData.overallGrade || 'B',\n        gradeExplanation: analysisData.gradeExplanation || 'Standard performance assessment.',\n        strengths: analysisData.strengths || [],\n        weaknesses: analysisData.weaknesses || [],\n        advice: analysisData.advice || 'No specific advice available.',\n        outlook: analysisData.outlook || 'Outlook not available.',\n        upcomingMatchup: analysisData.upcomingMatchup || {\n          opponent: upcomingOpponent,\n          prediction: 'Competitive matchup expected',\n          keyFactors: ['Player availability', 'Recent form', 'Matchup history'],\n          confidence: 'Medium'\n        },\n        rosterAnalysis: analysisData.rosterAnalysis || {\n          qb: 'QB assessment not available',\n          rb: 'RB assessment not available',\n          wr: 'WR assessment not available',\n          te: 'TE assessment not available',\n          flex: 'Flex assessment not available',\n          defense: 'K/DST assessment not available'\n        },\n        recentTrends: analysisData.recentTrends || ['Performance trends not available']\n      };\n    } catch (error) {\n      console.error('Claude API error:', error);\n\n      // Fallback analysis if API fails\n      return this.getFallbackAnalysis(team, allTeams);\n    }\n  }\n  buildLeagueContext(teams, leagueName, currentWeek) {\n    const topTeams = teams.slice(0, 3);\n    const bottomTeams = teams.slice(-3);\n    return `League: ${leagueName}\nCurrent Week: ${currentWeek}\nLeague Size: ${teams.length} teams\n\nTop 3 Teams:\n${topTeams.map(t => `${t.rank}. ${t.display_name} (${t.wins}-${t.losses}, ${t.points_for.toFixed(1)} PF)`).join('\\n')}\n\nBottom 3 Teams:\n${bottomTeams.map(t => `${t.rank}. ${t.display_name} (${t.wins}-${t.losses}, ${t.points_for.toFixed(1)} PF)`).join('\\n')}`;\n  }\n  buildTeamContext(team, allTeams) {\n    const avgPoints = allTeams.reduce((sum, t) => sum + t.points_for, 0) / allTeams.length;\n    const avgPointsAgainst = allTeams.reduce((sum, t) => sum + t.points_against, 0) / allTeams.length;\n    return `Team Performance vs League Average:\nPoints For: ${team.points_for.toFixed(1)} (league avg: ${avgPoints.toFixed(1)})\nPoints Against: ${team.points_against.toFixed(1)} (league avg: ${avgPointsAgainst.toFixed(1)})\nPoint Differential: ${(team.points_for - team.points_against).toFixed(1)}`;\n  }\n  getFallbackAnalysis(team, allTeams) {\n    const avgPoints = allTeams.reduce((sum, t) => sum + t.points_for, 0) / allTeams.length;\n    const isTopHalf = team.rank <= Math.ceil(allTeams.length / 2);\n    const highScoring = team.points_for > avgPoints;\n    let strengths = [];\n    let weaknesses = [];\n    let advice = '';\n    let outlook = '';\n    if (highScoring) {\n      strengths.push('Strong offensive production');\n      strengths.push('Consistently high scoring potential');\n    } else {\n      weaknesses.push('Below average scoring output');\n      weaknesses.push('Need to improve roster productivity');\n    }\n    if (isTopHalf) {\n      strengths.push('Currently in playoff contention');\n      outlook = 'Good position for playoff push with consistent performance.';\n    } else {\n      weaknesses.push('Currently outside playoff picture');\n      outlook = 'Need strong finish to make playoffs. Focus on high-upside plays.';\n    }\n    advice = highScoring ? 'Maintain consistent lineup choices and avoid risky plays.' : 'Look for waiver wire pickups and consider bold lineup moves.';\n    return {\n      teamName: team.display_name,\n      record: `${team.wins}-${team.losses}`,\n      strengths,\n      weaknesses,\n      advice,\n      outlook\n    };\n  }\n}\nexport const claudeApi = new ClaudeApiService();","map":{"version":3,"names":["ClaudeApiService","constructor","apiKey","baseUrl","process","env","REACT_APP_CLAUDE_API_KEY","console","warn","analyzeTeam","team","allTeams","leagueName","currentWeek","Error","leagueContext","buildLeagueContext","teamContext","buildTeamContext","upcomingOpponent","getUpcomingOpponent","prompt","display_name","wins","losses","points_for","toFixed","rank","length","_data$content$","response","fetch","method","headers","body","JSON","stringify","model","max_tokens","messages","role","content","ok","status","data","json","analysisText","text","jsonMatch","match","analysisData","parse","teamName","record","overallGrade","gradeExplanation","strengths","weaknesses","advice","outlook","upcomingMatchup","opponent","prediction","keyFactors","confidence","rosterAnalysis","qb","rb","wr","te","flex","defense","recentTrends","error","getFallbackAnalysis","teams","topTeams","slice","bottomTeams","map","t","join","avgPoints","reduce","sum","avgPointsAgainst","points_against","isTopHalf","Math","ceil","highScoring","push","claudeApi"],"sources":["/Users/roshikdatla/Documents/Amberwood-Football-League/fantasy-football-dashboard/src/services/claudeApi.ts"],"sourcesContent":["import { TeamStanding } from '../types/sleeper';\n\ninterface ClaudeApiResponse {\n  content: Array<{\n    text: string;\n  }>;\n}\n\ninterface TeamAnalysis {\n  teamName: string;\n  record: string;\n  overallGrade: string;\n  gradeExplanation: string;\n  strengths: string[];\n  weaknesses: string[];\n  advice: string;\n  outlook: string;\n  upcomingMatchup: {\n    opponent: string;\n    prediction: string;\n    keyFactors: string[];\n    confidence: string;\n  };\n  rosterAnalysis: {\n    qb: string;\n    rb: string;\n    wr: string;\n    te: string;\n    flex: string;\n    defense: string;\n  };\n  recentTrends: string[];\n}\n\nexport class ClaudeApiService {\n  private apiKey: string;\n  private baseUrl = 'https://api.anthropic.com/v1/messages';\n\n  constructor() {\n    this.apiKey = process.env.REACT_APP_CLAUDE_API_KEY || '';\n    if (!this.apiKey) {\n      console.warn('Claude API key not found. Set REACT_APP_CLAUDE_API_KEY environment variable.');\n    }\n  }\n\n  async analyzeTeam(\n    team: TeamStanding, \n    allTeams: TeamStanding[], \n    leagueName: string,\n    currentWeek: number\n  ): Promise<TeamAnalysis> {\n    if (!this.apiKey) {\n      throw new Error('Claude API key not configured');\n    }\n\n    const leagueContext = this.buildLeagueContext(allTeams, leagueName, currentWeek);\n    const teamContext = this.buildTeamContext(team, allTeams);\n    const upcomingOpponent = this.getUpcomingOpponent(team, allTeams, currentWeek);\n    \n    const prompt = `Provide a comprehensive fantasy football analysis for this team:\n\nLEAGUE CONTEXT:\n${leagueContext}\n\nTEAM TO ANALYZE:\n${team.display_name}\nRecord: ${team.wins}-${team.losses}\nPoints For: ${team.points_for.toFixed(1)}\nLeague Rank: ${team.rank} out of ${allTeams.length}\n\nPERFORMANCE CONTEXT:\n${teamContext}\n\nUPCOMING MATCHUP:\nNext opponent: ${upcomingOpponent}\n\nProvide a detailed analysis in JSON format:\n{\n  \"overallGrade\": \"A+/A/A-/B+/B/B-/C+/C/C-/D+/D/F\",\n  \"gradeExplanation\": \"2-3 sentence explanation of the grade\",\n  \"strengths\": [\"strength1\", \"strength2\", \"strength3\"],\n  \"weaknesses\": [\"weakness1\", \"weakness2\", \"weakness3\"], \n  \"advice\": \"Specific actionable advice for upcoming games\",\n  \"outlook\": \"Rest of season and playoff outlook\",\n  \"upcomingMatchup\": {\n    \"opponent\": \"${upcomingOpponent}\",\n    \"prediction\": \"Win/Loss prediction with score estimate\",\n    \"keyFactors\": [\"factor1\", \"factor2\", \"factor3\"],\n    \"confidence\": \"High/Medium/Low confidence level\"\n  },\n  \"rosterAnalysis\": {\n    \"qb\": \"QB position strength assessment\",\n    \"rb\": \"RB position strength assessment\", \n    \"wr\": \"WR position strength assessment\",\n    \"te\": \"TE position strength assessment\",\n    \"flex\": \"FLEX position depth assessment\",\n    \"defense\": \"K/DST strength assessment\"\n  },\n  \"recentTrends\": [\"trend1\", \"trend2\", \"trend3\"]\n}\n\nFocus on fantasy football strategy, performance trends, and actionable insights.`;\n\n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': this.apiKey,\n          'anthropic-version': '2023-06-01'\n        },\n        body: JSON.stringify({\n          model: 'claude-3-sonnet-20240229',\n          max_tokens: 1000,\n          messages: [\n            {\n              role: 'user',\n              content: prompt\n            }\n          ]\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Claude API error: ${response.status}`);\n      }\n\n      const data: ClaudeApiResponse = await response.json();\n      const analysisText = data.content[0]?.text || '';\n      \n      // Parse the JSON response from Claude\n      const jsonMatch = analysisText.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error('Invalid response format from Claude API');\n      }\n\n      const analysisData = JSON.parse(jsonMatch[0]);\n      \n      return {\n        teamName: team.display_name,\n        record: `${team.wins}-${team.losses}`,\n        overallGrade: analysisData.overallGrade || 'B',\n        gradeExplanation: analysisData.gradeExplanation || 'Standard performance assessment.',\n        strengths: analysisData.strengths || [],\n        weaknesses: analysisData.weaknesses || [],\n        advice: analysisData.advice || 'No specific advice available.',\n        outlook: analysisData.outlook || 'Outlook not available.',\n        upcomingMatchup: analysisData.upcomingMatchup || {\n          opponent: upcomingOpponent,\n          prediction: 'Competitive matchup expected',\n          keyFactors: ['Player availability', 'Recent form', 'Matchup history'],\n          confidence: 'Medium'\n        },\n        rosterAnalysis: analysisData.rosterAnalysis || {\n          qb: 'QB assessment not available',\n          rb: 'RB assessment not available', \n          wr: 'WR assessment not available',\n          te: 'TE assessment not available',\n          flex: 'Flex assessment not available',\n          defense: 'K/DST assessment not available'\n        },\n        recentTrends: analysisData.recentTrends || ['Performance trends not available']\n      };\n\n    } catch (error) {\n      console.error('Claude API error:', error);\n      \n      // Fallback analysis if API fails\n      return this.getFallbackAnalysis(team, allTeams);\n    }\n  }\n\n  private buildLeagueContext(teams: TeamStanding[], leagueName: string, currentWeek: number): string {\n    const topTeams = teams.slice(0, 3);\n    const bottomTeams = teams.slice(-3);\n    \n    return `League: ${leagueName}\nCurrent Week: ${currentWeek}\nLeague Size: ${teams.length} teams\n\nTop 3 Teams:\n${topTeams.map(t => `${t.rank}. ${t.display_name} (${t.wins}-${t.losses}, ${t.points_for.toFixed(1)} PF)`).join('\\n')}\n\nBottom 3 Teams:\n${bottomTeams.map(t => `${t.rank}. ${t.display_name} (${t.wins}-${t.losses}, ${t.points_for.toFixed(1)} PF)`).join('\\n')}`;\n  }\n\n  private buildTeamContext(team: TeamStanding, allTeams: TeamStanding[]): string {\n    const avgPoints = allTeams.reduce((sum, t) => sum + t.points_for, 0) / allTeams.length;\n    const avgPointsAgainst = allTeams.reduce((sum, t) => sum + t.points_against, 0) / allTeams.length;\n    \n    return `Team Performance vs League Average:\nPoints For: ${team.points_for.toFixed(1)} (league avg: ${avgPoints.toFixed(1)})\nPoints Against: ${team.points_against.toFixed(1)} (league avg: ${avgPointsAgainst.toFixed(1)})\nPoint Differential: ${(team.points_for - team.points_against).toFixed(1)}`;\n  }\n\n  private getFallbackAnalysis(team: TeamStanding, allTeams: TeamStanding[]): TeamAnalysis {\n    const avgPoints = allTeams.reduce((sum, t) => sum + t.points_for, 0) / allTeams.length;\n    const isTopHalf = team.rank <= Math.ceil(allTeams.length / 2);\n    const highScoring = team.points_for > avgPoints;\n    \n    let strengths = [];\n    let weaknesses = [];\n    let advice = '';\n    let outlook = '';\n\n    if (highScoring) {\n      strengths.push('Strong offensive production');\n      strengths.push('Consistently high scoring potential');\n    } else {\n      weaknesses.push('Below average scoring output');\n      weaknesses.push('Need to improve roster productivity');\n    }\n\n    if (isTopHalf) {\n      strengths.push('Currently in playoff contention');\n      outlook = 'Good position for playoff push with consistent performance.';\n    } else {\n      weaknesses.push('Currently outside playoff picture');\n      outlook = 'Need strong finish to make playoffs. Focus on high-upside plays.';\n    }\n\n    advice = highScoring \n      ? 'Maintain consistent lineup choices and avoid risky plays.'\n      : 'Look for waiver wire pickups and consider bold lineup moves.';\n\n    return {\n      teamName: team.display_name,\n      record: `${team.wins}-${team.losses}`,\n      strengths,\n      weaknesses,\n      advice,\n      outlook\n    };\n  }\n}\n\nexport const claudeApi = new ClaudeApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}